From: Ralf Nolden <nolden@kde.org>
Date: Mon, 23 May 2016 20:00:05 +0000 (+0200)
Subject: WIP: Merge BSD implementations of QLockFilePrivate::processNameByPid()
X-Git-Url: https://codereview.qt-project.org/gitweb?p=qt%2Fqtbase.git;a=commitdiff_plain;h=25c36765cc3f1dcd953504d586f79c453f43eb21;hp=c18b802e337c1a58a687a0e9f1b23465c9036b0a

WIP: Merge BSD implementations of QLockFilePrivate::processNameByPid()

Until now, several solutions for the implementations of
processNameByPid() exist:
- one for FreeBSD using libutil through kinfo_getproc()
- one for GNU/kFreeBSD in commit
a8f4fa217daa1b6f7b13cc48c1e5ee8d2d76b008
  was added where kinfo_getproc() is not present using sysctl().

OpenBSD and NetBSD also had different approaches in their ports patches
using kvm() and sysctl(). To find the least common denominator, merge
all versions to the one usable for everyone.

Change-Id: Iced9ef01e5966d8688f464f51024a7ed562e26a3
---

diff --git a/src/corelib/io/io.pri b/src/corelib/io/io.pri
index 8d9908c..553c996 100644
--- a/src/corelib/io/io.pri
+++ b/src/corelib/io/io.pri
@@ -147,7 +147,6 @@ win32 {
             SOURCES += io/qsettings_mac.cpp
             OBJECTIVE_SOURCES += io/qurl_mac.mm
         }
-        freebsd: LIBS_PRIVATE += -lutil         # qlockfile_unix.cpp requires this
         mac {
             osx {
                 OBJECTIVE_SOURCES += io/qfilesystemwatcher_fsevents.mm
diff --git a/src/corelib/io/qlockfile_unix.cpp b/src/corelib/io/qlockfile_unix.cpp
index f23a232..52f2bd4 100644
--- a/src/corelib/io/qlockfile_unix.cpp
+++ b/src/corelib/io/qlockfile_unix.cpp
@@ -59,14 +59,12 @@
 #   include <unistd.h>
 #   include <cstdio>
 #elif defined(Q_OS_BSD4) && !defined(Q_OS_IOS)
+# if !defined(Q_OS_NETBSD)
 #   include <sys/user.h>
-# if defined(__GLIBC__) && defined(__FreeBSD_kernel__)
+# endif
 #   include <sys/cdefs.h>
 #   include <sys/param.h>
 #   include <sys/sysctl.h>
-# else
-#   include <libutil.h>
-# endif
 #endif
 
 QT_BEGIN_NAMESPACE
@@ -269,30 +267,45 @@ QString QLockFilePrivate::processNameByPid(qint64 pid)
     buf[len] = 0;
     return QFileInfo(QFile::decodeName(buf)).fileName();
 #elif defined(Q_OS_BSD4) && !defined(Q_OS_IOS)
-# if defined(__GLIBC__) && defined(__FreeBSD_kernel__)
-    int mib[4] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid };
+# if defined(Q_OS_NETBSD)
+    struct kinfo_proc2 kp, *proc = &kp;
+    int mib[6] = { CTL_KERN, KERN_PROC2, KERN_PROC_PID, (int)pid, sizeof(struct kinfo_proc2), 1 };
     size_t len = 0;
-    if (sysctl(mib, 4, NULL, &len, NULL, 0) < 0)
+    if (sysctl(mib, 6, NULL, &len, NULL, 0) < 0)
+        return QString();
+# elif defined(Q_OS_OPENBSD)
+    struct kinfo_proc kp, *proc = &kp;
+    int mib[6] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, (int)pid, sizeof(struct kinfo_proc), 1 };
+    size_t len = 0;
+    if (sysctl(mib, 6, NULL, &len, NULL, 0) < 0)
         return QString();
-    kinfo_proc *proc = static_cast<kinfo_proc *>(malloc(len));
 # else
-    kinfo_proc *proc = kinfo_getproc(pid);
+    struct kinfo_proc kp, *proc = &kp;
+    int mib[4] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, (int)pid };
+    size_t len = 0;
+    if (sysctl(mib, 4, NULL, &len, NULL, 0) < 0)
+        return QString();
 # endif
+
     if (!proc)
         return QString();
-# if defined(__GLIBC__) && defined(__FreeBSD_kernel__)
-    if (sysctl(mib, 4, proc, &len, NULL, 0) < 0) {
-        free(proc);
+
+# if defined(Q_OS_OPENBSD) || defined(Q_OS_NETBSD)
+    if (sysctl(mib, 6, proc, &len, NULL, 0) < 0)
         return QString();
-    }
-    if (proc->ki_pid != pid) {
-        free(proc);
+    if (proc->p_pid != pid)
+        return QString();
+    QString name = QFile::decodeName(proc->p_comm);
+    return name;
+# else
+    if (sysctl(mib, 4, proc, &len, NULL, 0) < 0)
+        return QString();
+    if (proc->ki_pid != pid)
         return QString();
-    }
-# endif
     QString name = QFile::decodeName(proc->ki_comm);
-    free(proc);
     return name;
+# endif
+
 #else
     Q_UNUSED(pid);
     return QString();
